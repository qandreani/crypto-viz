version: "3.7"
services:
  zookeeper:
    restart: always
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app_network

  kafka:
    restart: always
    build:
      context: ./kafka-config
      dockerfile: Dockerfile
    ports:
      - "9092:9092"
      - "9093:9093"
      - "5555:5555"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - app_network

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    volumes:
      - ./create-topics.sh:/create-topics.sh
    command: ["sh", "-c", "./create-topics.sh"]
    networks:
      - app_network

  spark:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_METRICS_ENABLED=true
    ports:
      - "8080:8080"
    volumes:
      - "./spark-scripts:/opt/spark-scripts"
      - "./spark-conf:/opt/bitnami/spark/conf"
      - "./spark-checkpoints:/opt/spark-checkpoints"
    networks:
      - app_network

  spark-worker:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_METRICS_ENABLED=true
    ports:
      - "8081:8081"
    depends_on:
      - spark
    networks:
      - app_network

  spark-job-launcher:
    image: docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      /bin/sh -c "
      apk add --no-cache docker-cli &&
      docker exec t-dat-901-nan_1-spark-1 /opt/spark-scripts/entrypoint.sh
      "
    depends_on:
      - spark
      - spark-worker
    networks:
      - app_network

  influxdb:
    image: influxdb:latest
    ports:
      - "8086:8086"
    volumes:
      - "influxdb-data:/var/lib/influxdb"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=secretpassword
      - DOCKER_INFLUXDB_INIT_ORG=myorg
      - DOCKER_INFLUXDB_INIT_BUCKET=mybucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytoken
    networks:
      - app_network

  telegraf:
    image: telegraf:latest
    depends_on:
      - influxdb
      - spark
      - kafka
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - app_network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - app_network
    restart: always
    volumes:
      - 'grafana_storage:/var/lib/grafana'
      - './grafana-provisioning/datasources:/etc/grafana/provisioning/datasources'
      - './grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards'

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  kafka-volume:
  zookeeper-volume:
  grafana_storage: {}
  influxdb-data: {}
